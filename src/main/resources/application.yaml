# This file is a way to configure your application. It has been converted from the default application.properties to
# application.yaml
# With multi-part yamls, we can specify configs for different profiles.
# To run your app with a specific profile, add this to the IntelliJ's Runner Environment Variables:
# `spring.profiles.active=dev`


spring.config.activate.on-profile: dev
# Note the properties for the dev profile are not indented on purpose.
server:
  port: 8000
# Use this comment with hyphens to separate different profiles. This is called a multi-part YML file

---
spring.config.activate.on-profile: test
server:
  port: 9000

# If you activate a profile and a particular property does not have a value for that profile, the default value will
# be loaded (e.g. if activated the profile "foo" the server port will be 8080).

---
# Configs that are not specified for a specific profile, are always loaded
logging.level.org.springframework.jdbc.datasource.init.ScriptUtils: debug
logging.level.org.hibernate.engine.jdbc.env.internal.LobCreatorBuilderImpl: error

spring:
  datasource:
    # We are using ./bin/start_postgres.sh to run postgres inside a docker container
    platform: postgres
    url: jdbc:postgresql://localhost:5432/dev
    # SECRETS! In real life you would NOT put this in plain text here. Use Env vars or secret managers.
    username: postgres
    password: postgres

  jpa:
    hibernate:
      # Since we have the seed files data.sql and schema.sql, we don't want JPA to automatically create the schema
      # for us
      ddl-auto: none
    database: postgresql

# Commented out H2 configuration
#  h2:
#    console:
#      enabled: true
#spring.datasource.url: jdbc:h2:mem:mydb